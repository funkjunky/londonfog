TODO
———

Sunday - 11:30-1:30

 - actual TODO:
	*- update restmodelmixin.saveModel to use this.modelData() if it exists, if not, then use this.state.data
	*- try having modelData in the mixin, and see if it gets overwritten. If not, then give up
	*- update the socket with this new methodology. use saveModel in todo
	
	*- get socket working with todo
	
	*- Rewrite the saveModel and delete to take arguments to specify what to save or delete, then use that to choose what to do when the lengths are different in the collection for componentDidUpdate
	*- ensure editing works with the sockets
	*- make sure that if i update from one browser, itll show up in another.
		*- use socketHandler…
	- add the ability to create new todos
		- add the html
		- add the js to do everything, including add the todo to the collection
		- ensure the mixin automatically emits a ‘create’
	- add button for deleting todos
		- simply remove the items from the collection
		- ensure the delete is called by the mixin.

	- get socket working with project
	- go back to looking at todo

 - Create first components
	- todo
		- save-able (preferably local-storage + sockets, with seamless mixins)
			*- stop the object from trying to save right off the bat.
			- look into how to not have the client grab the same information a second time…

			*- try components with restmodelmixin
				*- ensure getting data works (remove data)
				*- ensure saving new data works  POST
				*- ensure saving old data works  PUT
			- try components with SocketModelMixin
				- ensure everything…
		- ensure everything gets updated when i save, including the todos in different locations
		- address TODOs:
			- setState is called twice
			- we are only grabbing data on client side.
		- smooth the styling and make it look awesome
	- update generic rest git
		- update readme so it’s smarter and to mention technologies etc.
		- merge —no-ff generic rest server to dev, then merge to master and push, then tag with a version.
		- post on facebook and G+ about the update to generic rest server

 - rename iteminstance.js to item-instance.js and fix all references

 ~commit

 - improve tooling
	- fix my damn vim! The colours are awful, and i want the html tag matching with %
 		- colour
		- tag bracket matching
		- Tom’s alignment plugin
		- auto indenting that isn’t retarded
	- grunt file is still a bit outta whack. I need to have the “compile” task to happen before attempting to start the server.
	- setup commonjs with react and ensure everything compiles
	- setup everything to use commonjs properly, ie. including files needed in each file
	- client side errors are hard to trace because of one file, see about making a mapping file for it.
	- I wonder if I could edit using jsx…. then compile later for live?

 ~ commit

 - turn all callback stuff into promise based stuff.

 - improve generic rest server
	- first ensure it works
	- add generic user creation and authentication/authorization using authorization header. PS I may need to add an allow header thing for ‘authorization’?

 - Add user component and authorization
	- add organizations and various updates regarding those things?? to User.
	- add user component
		- add html for user-tile, and expanding control
		- add component user-tile
		- add component user-control
		- add route and component for user-detail
		- smooth the styling and make it look awesome
~commit

 - add the framework for saving things and getting updates from the server through web sockets
	- try using feather to make a generic rest server:
		http://feathersjs.com/#toc6
	- add a layer to whatever rest framework I use, so I can accept sockets
	- make a socket framework for listening to sockets and storing their data?? and sending updates, etc. Maybe a mixin, but the socket would need to be static, as well as it’s cached data… tricky… subscriptions and stuff??
 - get client side routing working

 - Create other components
	- fill out the bullets for task and project …
	- task
		- smooth the styling and make it look awesome
	- project
		- contains a ColumnList of tasks, that can be collapsed
		- smooth the styling and make it look awesome


 - make workspace routes and component
	- see paper for 2 column layout.

 - add in organizations to the mix somehow…
	~ organizations can own multiple projects and multiple users

 - add basic role security for projects and tasks and TODOs [special nosey role, that allows someone to see all TODOs for a organization/project]

 - allow organizations to be nestable. One organization owning a set of organizations

 - add homepage with a little marketing pizzaz, perhaps stellar or something neat. Big sign up form and such too. Tkae notes from other reallyt good home pages.

 - double check there isn’t anything imperative I’m missing, before considering release… something very important and necessary for PM software…

 - [look to buy the web domain londonfog-pm]

 - deploy my new awesome software!

 - add react debug mixin, It might help some of my trickier issues.
 - add reactmq to work with tablets and phones

FUTURE:
 - add github hooks
 - add —-flags to generic rest server, then push to github
 - setup more secure rest server…??? hmmm or extend generic rest server with security measures??

DONE:
———
 - Testing Reacts with forms:
	- test out with autocomplete just rendering…
 	- add hiding of list
 	- add showing list when input is focused
 	- filter list depending on what is in the input
 	- add listener for form onSubmit, cancel the submission and console.log the form.
	- add clicking items to retreive option.
	- add mapping (function, JSX makes it easy)

 - create new project for londonfog
	- new folder in projects
	- git init
	- README (simple, but rich text)
	- commit and push

 - setup basic dependencies
	- setup package.json for server dependencies:
		- express, grunt, react router, super agent, react time ago
		- rectify, react document title, material-ui
	- get all dependencies [npm install]

 - setup generic rest server to server me data

 - setup server to host first two pages using react router [just server side for now, using interpreter for now, don’t bother compiling]
	- split code into different files
	- setup grunt and react compiling, remember to do it for es6
 - stop compiling the server, don’t use jsx… just use the already compiled js and build on that.
 - use commonjs stuff to include the correct files for the server
 - for the error, look up how res.render works… maybe I should be using res.send? also what is ‘main’?

 - I need to get nodemon to watch all js files in src… it doesn’t seem like it does…
 - test all routes.

 - create full visual design for app… (fyi I’ll be using material design by google)
 - branch to dev
 - Create routes
	- todo, task, project [for real version]
		- todo-short
			- render part
			- content-editable
			- showing and hiding buttons based on states
		- add whole shell of components
		- get client side js working
		- add events for all states
- first browserify and precompiling all jsx into js, I think is a good idea
			- next see about doing other things more nicely?? look back at server and routes
				- remove any more mentions of react-router
				- clean up warnings
				- remove unnecessary libraries from package.json
				- remove unnecessary rules from grunt
					- don’t need bundle.js
				- try and update all versions of things in package.json
- create ModelMixin:
				- expects id in props
					- looks for data in props next to merge with
					- if data contains an id, then use it, otherwise
				- if no id has been set in mixin, then it’s assumed new
				- expects this.ModelMixin.url to be set with :id as placeholder
				- uses componentDidUpdate to listen to state changes
					- have componentDidUpdate with ModelMixin.save, do a delayed save, waiting like 100ms, and reseting the delay each time the data is updated.
			- create ModelRestMixin:
				- save function sends post, put, delete calls
			- create ModelSocketMixin:
				- cache’s url, so anyone using the same url, well use the same socket.
				- save function sends data over socket
				- make a mixin that extend ModelSocketMixin, called LFSocketMixin, which has the url already set.
- implement client side sockets using feathers
				- implement featherjs on client
					- emit: create, update, delete, get
					- on id
			- get generic rest server working again
				- first get rest server working [manually add data, then use get, good enough]
- generic rest server, feathers
			- implement it, where the user passes in a comma separated list of collections they plan to use. “todo,project,task” and i’ll parse thatb and create services for them that are all generic.

