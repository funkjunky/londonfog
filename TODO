TODO
———
	Colour Pallete: http://www.colourlovers.com/palette/15787/spiced_chai
		backgrounds: #F8EDC1, #F6E7B3, #E9DB92
		foregrounds and borders: #922635, #442905

	- instantiating cosmetics [making the project pretty from now on]
		*- look for a nice London Fog Tea looking colour swatch/ scheme online
		*- choose a nice font that most browsers have
		*- look up how to do a simple two column layout
		*- Make the header MUCH nicer
			*- add static user info on top right
		- redo design of TODOs
			- no more status, instead just a boolean: ‘done’
				- move the status buttons to the task 
		- improve the styling of TODOs
		- improve the styling of Project, basically for now.
	- get task and project working as intended in London Fog

	- grab data on server side, then update on client afterwards [see SO QA]

 	- improve tooling
		- fix my damn vim! The colours are awful, and i want the html tag matching with %
 			- colour
			- tag bracket matching
			- Tom’s alignment plugin
			- auto indenting that isn’t retarded
		- grunt file is still a bit outta whack. I need to have the “compile” task to happen before attempting to start the server.
		- setup commonjs with react and ensure everything compiles
		- setup everything to use commonjs properly, ie. including files needed in each file
		- client side errors are hard to trace because of one file, see about making a mapping file for it.
		- stop tracking compiled files. Deploy script should create the files or something… but I don’t like committing double the files.

	- update generic rest git
		- add generic user creation and authentication/authorization using authorization header. PS I may need to add an allow header thing for ‘authorization’?
		- update readme so it’s smarter and to mention technologies etc.
		- merge —no-ff generic rest server to dev, then merge to master and push, then tag with a version.
		- post on facebook and G+ about the update to generic rest server

 	- Add user component and authorization
		- add organizations and various updates regarding those things?? to User.
			- allow organizations to be nestable. One organization owning a set of organizations
		- add user component
			- add html for user-tile, and expanding control
			- add component user-tile
			- add component user-control
			- add route and component for user-detail
			- smooth the styling and make it look awesome
	- add promises to all callback functionality, and all socket stuff.
	- all emits should work off of promises
	- update restmixin to work again
	- clean up ALL todos.
	- make sure the webpage doesn’t break horribly if the socket server goes down…
		
 	- add mobile controls. [like Google inbox? swiping, right to complete, left to downgrade (high priority->normal priority. normal -> icebox, icebox -> delete ?? keep there for a second before fading away, so a user can swipe three times on the spot to delete?)]
		- add reactmq to work with tablets and phones
 	- add homepage with a little marketing pizzaz, perhaps stellar or something neat. Big sign up form and such too. Tkae notes from other reallyt good home pages.
 	- double check there isn’t anything imperative I’m missing, before considering release… something very important and necessary for PM software…
 	- [look to buy the web domain londonfog-pm]
 	- deploy my new awesome software!



FUTURE:
 - add github hooks
 - add —-flags to generic rest server, then push to github
 - setup more secure rest server…??? hmmm or extend generic rest server with security measures??

DONE:
———
 - Testing Reacts with forms:
	- test out with autocomplete just rendering…
 	- add hiding of list
 	- add showing list when input is focused
 	- filter list depending on what is in the input
 	- add listener for form onSubmit, cancel the submission and console.log the form.
	- add clicking items to retreive option.
	- add mapping (function, JSX makes it easy)

 - create new project for londonfog
	- new folder in projects
	- git init
	- README (simple, but rich text)
	- commit and push

 - setup basic dependencies
	- setup package.json for server dependencies:
		- express, grunt, react router, super agent, react time ago
		- rectify, react document title, material-ui
	- get all dependencies [npm install]

 - setup generic rest server to server me data

 - setup server to host first two pages using react router [just server side for now, using interpreter for now, don’t bother compiling]
	- split code into different files
	- setup grunt and react compiling, remember to do it for es6
 - stop compiling the server, don’t use jsx… just use the already compiled js and build on that.
 - use commonjs stuff to include the correct files for the server
 - for the error, look up how res.render works… maybe I should be using res.send? also what is ‘main’?

 - I need to get nodemon to watch all js files in src… it doesn’t seem like it does…
 - test all routes.

 - create full visual design for app… (fyi I’ll be using material design by google)
 - branch to dev
 - Create routes
	- todo, task, project [for real version]
		- todo-short
			- render part
			- content-editable
			- showing and hiding buttons based on states
		- add whole shell of components
		- get client side js working
		- add events for all states
- first browserify and precompiling all jsx into js, I think is a good idea
			- next see about doing other things more nicely?? look back at server and routes
				- remove any more mentions of react-router
				- clean up warnings
				- remove unnecessary libraries from package.json
				- remove unnecessary rules from grunt
					- don’t need bundle.js
				- try and update all versions of things in package.json
- create ModelMixin:
				- expects id in props
					- looks for data in props next to merge with
					- if data contains an id, then use it, otherwise
				- if no id has been set in mixin, then it’s assumed new
				- expects this.ModelMixin.url to be set with :id as placeholder
				- uses componentDidUpdate to listen to state changes
					- have componentDidUpdate with ModelMixin.save, do a delayed save, waiting like 100ms, and reseting the delay each time the data is updated.
			- create ModelRestMixin:
				- save function sends post, put, delete calls
			- create ModelSocketMixin:
				- cache’s url, so anyone using the same url, well use the same socket.
				- save function sends data over socket
				- make a mixin that extend ModelSocketMixin, called LFSocketMixin, which has the url already set.
- implement client side sockets using feathers
				- implement featherjs on client
					- emit: create, update, delete, get
					- on id
			- get generic rest server working again
				- first get rest server working [manually add data, then use get, good enough]
- generic rest server, feathers
			- implement it, where the user passes in a comma separated list of collections they plan to use. “todo,project,task” and i’ll parse thatb and create services for them that are all generic.
	*- update restmodelmixin.saveModel to use this.modelData() if it exists, if not, then use this.state.data
	*- try having modelData in the mixin, and see if it gets overwritten. If not, then give up
	*- update the socket with this new methodology. use saveModel in todo
	
	*- get socket working with todo
	
	*- Rewrite the saveModel and delete to take arguments to specify what to save or delete, then use that to choose what to do when the lengths are different in the collection for componentDidUpdate
	*- ensure editing works with the sockets
	*- make sure that if i update from one browser, itll show up in another.
		*- fill in events for model and collection mixins
		*- make sure page loads and editing persists
		*- commit
	- add the ability to create new todos
		*- add the html with button
		*- don’t call save in the collection… the model well do it once the user changes the state at all. (so perfect…)
		*- in ::create for collection, check each item in _getData and check every property, if they all match, then the item is equal, THEN we add a new blank item to the collection.
			*- else we simply add the item to the collection.
		*- on the return of saveModel for socketmodelmixin, update using _setData
	*- add the code for handling delete events in collectionmixin
	*- add button for deleting todos
		*- in the destruction call for the TODO, delete it? Perhaps? I don’t want collection to handle it.
	*- rename  disable to autosync and simply set to true or false, no functions.
	*- Add the add button and all functionality to todo, then rename it to create.
	*- ensure the add code works
		*- test more in one go, both adding and deleteing
	*- I should have a fully working UI for TODOs
		*- todos aren’t staying synced between windows...

	*- the getNewItem function needs to be in one place, probably TODO or Project
	*- Address really bad //TODOs in code
	*- clean up meaningless console logs.
	
	*- Code for TODOs should be simple and straight forward and only handle UI. (except the create button and delete button. Only exceptions.)

