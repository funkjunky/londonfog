TODO
———
	Colour Pallete: http://www.colourlovers.com/palette/15787/spiced_chai

	- instantiating cosmetics [making the project pretty from now on]
		*- look for a nice London Fog Tea looking colour swatch/ scheme online
		*- choose a nice font that most browsers have
		*- look up how to do a simple two column layout
		*- Make the header MUCH nicer
			*- add static user info on top right
		*- redo design of TODOs
			*- no more status, instead just a boolean: ‘done’
				*- move the status buttons to the task 
		- improve the styling of TODOs
			*- adjust checkbox to fix more evenly in row
				*- Task disappeared, but from my fiddle it looks like position absolute, top0 right0 is the answer.
			*- figure out assign UI
				*- button on right side. Like checkbox, but with ‘task?’
			*- style create button
			*- style delete in there somehow.

	- get task and project working as intended in London Fog
		- projects
			*- add arrow
			*- tasks take a prop to be called whenever their state changes.
			*- ensure a blank task is given a create button
			- add a button in the workspace header to add a project
				*- create a “modal” component
					*- style: blacked out 70% alpha background
					*- expects style to added
					*- element to be transcluded
				*- create project-form [modelmixin]
					*- add the necessary fields
					*- add their events for setState
				*- rename workspace header to header
				*- create the workspace header that well have our create project button [eventually filters and stuff too]
				*- add the modal with project-form to workspace header, under a ternary for this.showCreateProject
					*- add controls to button
					*- fix what’s causing some issue in transclusion…
					*- make sure the button works.
					*- make sure all the styles are correct for modal structure
					*- add styling for the form
					*- make sure the modal goes away if we click outside
					*- make sure the project form saves when we click save.
					*- make sure the project shows up in the project list on the right after.
					*- on save make modal close
			- in project.jsx component, add a ‘create tasks’ and ‘create todos’ buttons, to the right of the title.
				*- when clicking these buttons, the style changes to show they are turned on.
				*- the buttons should be mutually exclusive
				*- when the create tasks button is clicked, change state.creatingTasks
				*- when the create todos button is clicked, change state.creatingTodos
				*- make a mixin for stateShortcuts
				*- allow the task to do new instances…
				*- show create task and todos when respect button is pressed and styled.
	
				*- fix styling for things thus far.
					*- background colour of the project label should be blank or the purple
					*- foreground should be fg colour
					*- remove large padding left on first project

				*- get the “create todos” to work
				*- make sure the styling is ok for TODOs
					*- get the width up to 100%
					*- Increase font size, add text effect and unique native font.
				*- improve the styling of the task at least in a basic sense
					*- same background colour and forecolour as TODOs for now
					*- ensure the project badge is there
					*- ensure the full width is there

				*- be able to turn back on autosync for projects and get it to work
					*- When saving in modelmixin, check to see if the model has changed using _getModel and oldModel [which I well not cache]
				*- Add a content-editable on the left most for acronyms [Enough for 3 letters at Most. Large font like ]
				*- make an ordered colour list that sets colours as differently as possible
				*- automatically give a project a colour based on the number of projects that already exist
					*- remember to attach it to the Todo, and Task, and getData
				*- ensure the project badge shows for todos, then tasks
					*- show acronym, and make background colour the same as project

			*- add type drop down like pivotal icons, dropdown of icons. bug, feature, upgrade
				*- ensure the bug shows up in the row aligned well
				*- instead show an icon based on the type and set the type to ‘bug’ by default.
				*- build html menu with different icons and names of what they are beside it.
				*- make onclick for menu work
				*- ensure clicking an icon changes the type
			*- ensure you can create a task
				*- ensure new tasks shows up as another thing under the project
				*- make sure the style is 100% width
				*- make sure the project is saving when this occurs.
				*- make it so the arrow is needed to be clicked again,rather than || true 
				*- ensure the status buttons show up instead of the create button if it’s no longer new
			*- ensure tasks being edited are being savd in their projects, and the project is making the save call

			*- ensure status buttons work for the tasks
				*- ensure the status buttons change as needed
				*- ensure the project is being saved as the task is updated.
				*- status buttons aren’t initially showing up… I think im not saving the id or something during saving.
			*- style status buttons nicely using colour scheme, rounded borders,
				*- use similar to create tasks and todos with shadows, but add rounded borders
			*- add arrow on the left most space for tasks
			*- only show arrow for project or tasks when there are tasks or todos under them.
			*- add button to add todos to tasks, like with project
			*- get the badge to show the task and project, when the task is set. [so fo the project badge, we need to show project if task is not set, or task.project if task is set]
			*- ensure that when we create a new todo we add it to the task, which adds it to the project, which should save the project.
			*- add code to show todos under the task, when the arrow is clicked [this.state.expanded]
			*- change the arrow when we expand to a down arrow
			*- add code to show todos under a project, but NOT under a task.
			*- in the left TODOs pane, show all todos and all todos under all projects and all todos under all tasks.
				*- create a todo-list, that shows all todos for projects, then all todos for the tasks under that project, then the next project, etc. No headers for projects or tasks… JUST the todos
				*- I need to reformat the workspace so the left column contains todo columnlist, then a todo-list…
			*- add Indenting for tasks under project, then todos under those tasks.
			*- todos from tasks aren’t showing up immediately…
			*- Figure out how to clear the textbox no matter what!! [worst case have a span that turns into an input.]
			*- Figure out how to get focus automatically
				*- first on creating a new todo
				*- then when “creating tasks” or “creating todos” both on project and task, do it to the task or todo, after hitting the button.
			*- hitting enter should add the newly created item
				*- focus wont gp back to new item. im pretty sure its cause react is using th old new input as the new item input.
			*- after hitting enter focus should be kept to the new item
			*- When we hit “create todos” we need to focus our new todo.
			- commit, based on adding focus features
			- convert the task to spans and input toggle
			- convert the project to span and input toggle
			- when we hit “create tasks” we need to focus the text of the new task
			- when we create a new todo or task under a project we need to expand the project if not expanded
			- when we create a new todo under a task we need to expand the task if not already expanded
			- display todos in reverse order.
			- hitting enter should blur the input [toggle the editingTitle]
			- the acronym for projects should always be caps, even while typing in the box
			- commit and push

			? How to associate current TODOs with tasks and projects???

???? If tasks are all a part of one big project… then what happens if there are a lot of tasks on one project and we have to constantly update the project?? It might be too taxing…

	- Add basic filters and style workspace header
		- add a text filter to be applied to everything [just checking title for now]
		- style the create project button and the text filter nicely.
		- style and organize projects, tasks, and todos appropriately.
			~Nitpick on colours etc at this point

 *** MAJOR CODE CLEAN UP TIME!!  [PERFECT CODE]  ***

	- see about using this.props.children more often… i found out about transclusion in reactjs too late… i could probably use it in a number of places to great affect… like adding buttons (del or create) to itemInstances, etc.
	- grab data on server side, then update on client afterwards [see SO QA]

 	- improve tooling
		- fix my damn vim! The colours are awful, and i want the html tag matching with %
 			- colour
			- tag bracket matching
			- Tom’s alignment plugin
			- auto indenting that isn’t retarded
		- grunt file is still a bit outta whack. I need to have the “compile” task to happen before attempting to start the server.
		- setup commonjs with react and ensure everything compiles
		- setup everything to use commonjs properly, ie. including files needed in each file
		- client side errors are hard to trace because of one file, see about making a mapping file for it.
		- stop tracking compiled files. Deploy script should create the files or something… but I don’t like committing double the files.

*** Tooling Improvements ***

	- update generic rest git
		- add generic user creation and authentication/authorization using authorization header. PS I may need to add an allow header thing for ‘authorization’?
		- update readme so it’s smarter and to mention technologies etc.
		- merge —no-ff generic rest server to dev, then merge to master and push, then tag with a version.
		- post on facebook and G+ about the update to generic rest server

 	- Add user component and authorization
		- add organizations and various updates regarding those things?? to User.
			- allow organizations to be nestable. One organization owning a set of organizations
		- add user component
			- add html for user-tile, and expanding control
			- add component user-tile
			- add component user-control
			- add route and component for user-detail
			- smooth the styling and make it look awesome
	- add promises to all callback functionality, and all socket stuff.
	- all emits should work off of promises
	- update restmixin to work again
	- todo and other things shouldn’t save when we toggle states. Ie. with TODO and editingTitle.
	- clean up ALL todos.
	- make sure the webpage doesn’t break horribly if the socket server goes down…
		
*** getting ready to publish!! ***

 	- add mobile controls. [like Google inbox? swiping, right to complete, left to downgrade (high priority->normal priority. normal -> icebox, icebox -> delete ?? keep there for a second before fading away, so a user can swipe three times on the spot to delete?)]
		- add reactmq to work with tablets and phones
 	- add homepage with a little marketing pizzaz, perhaps stellar or something neat. Big sign up form and such too. Tkae notes from other reallyt good home pages.
		- add mission priorities to front page, priorities for London Fog, so whenever i take feedback i ALWAYS consider these prioritis [something like simplicity first [TODO is text, done or not, everything else is still simple, the next priority, or whatever]]
 	- double check there isn’t anything imperative I’m missing, before considering release… something very important and necessary for PM software…
 	- [look to buy the web domain londonfog-pm]
 	- deploy my new awesome software!

	-Start to fix pesky bugs
		- when completing a TODO, the style doesn’t update for content-editable… it doesn’t go through?
		- autofocus on new todo in todo list.
		- focus on new todo when just created a new task in the project list.
		- hide delete button for todos, unless they are focused, OR the top filters delete button is pressed.
		- modal should handle the opening and closing based on a variable, itsself. So instead of wrapping it in a ternary, it should be it’s own element, ie: <Modal closeToggle={this.showCreateProject}>…</Modal>
	
	-add cool features
		 - add github hooks
			 - projects attached to github repos
			 - organizations attached to github organizations
				- automaticly asking them if they want to start a new project for recent github project and vice versa
			- quick marking of commits when completing a task or todo
			- perhaps more? This could be a huge boon to the software
		 - add —-flags to generic rest server, then push to github
		 - Make sure generic rest server is adequately secure. Consult Zak on this perhaps.
		 - come up with more cool features

DONE:
———
 - Testing Reacts with forms:
	- test out with autocomplete just rendering…
 	- add hiding of list
 	- add showing list when input is focused
 	- filter list depending on what is in the input
 	- add listener for form onSubmit, cancel the submission and console.log the form.
	- add clicking items to retreive option.
	- add mapping (function, JSX makes it easy)

 - create new project for londonfog
	- new folder in projects
	- git init
	- README (simple, but rich text)
	- commit and push

 - setup basic dependencies
	- setup package.json for server dependencies:
		- express, grunt, react router, super agent, react time ago
		- rectify, react document title, material-ui
	- get all dependencies [npm install]

 - setup generic rest server to server me data

 - setup server to host first two pages using react router [just server side for now, using interpreter for now, don’t bother compiling]
	- split code into different files
	- setup grunt and react compiling, remember to do it for es6
 - stop compiling the server, don’t use jsx… just use the already compiled js and build on that.
 - use commonjs stuff to include the correct files for the server
 - for the error, look up how res.render works… maybe I should be using res.send? also what is ‘main’?

 - I need to get nodemon to watch all js files in src… it doesn’t seem like it does…
 - test all routes.

 - create full visual design for app… (fyi I’ll be using material design by google)
 - branch to dev
 - Create routes
	- todo, task, project [for real version]
		- todo-short
			- render part
			- content-editable
			- showing and hiding buttons based on states
		- add whole shell of components
		- get client side js working
		- add events for all states
- first browserify and precompiling all jsx into js, I think is a good idea
			- next see about doing other things more nicely?? look back at server and routes
				- remove any more mentions of react-router
				- clean up warnings
				- remove unnecessary libraries from package.json
				- remove unnecessary rules from grunt
					- don’t need bundle.js
				- try and update all versions of things in package.json
- create ModelMixin:
				- expects id in props
					- looks for data in props next to merge with
					- if data contains an id, then use it, otherwise
				- if no id has been set in mixin, then it’s assumed new
				- expects this.ModelMixin.url to be set with :id as placeholder
				- uses componentDidUpdate to listen to state changes
					- have componentDidUpdate with ModelMixin.save, do a delayed save, waiting like 100ms, and reseting the delay each time the data is updated.
			- create ModelRestMixin:
				- save function sends post, put, delete calls
			- create ModelSocketMixin:
				- cache’s url, so anyone using the same url, well use the same socket.
				- save function sends data over socket
				- make a mixin that extend ModelSocketMixin, called LFSocketMixin, which has the url already set.
- implement client side sockets using feathers
				- implement featherjs on client
					- emit: create, update, delete, get
					- on id
			- get generic rest server working again
				- first get rest server working [manually add data, then use get, good enough]
- generic rest server, feathers
			- implement it, where the user passes in a comma separated list of collections they plan to use. “todo,project,task” and i’ll parse thatb and create services for them that are all generic.
	*- update restmodelmixin.saveModel to use this.modelData() if it exists, if not, then use this.state.data
	*- try having modelData in the mixin, and see if it gets overwritten. If not, then give up
	*- update the socket with this new methodology. use saveModel in todo
	
	*- get socket working with todo
	
	*- Rewrite the saveModel and delete to take arguments to specify what to save or delete, then use that to choose what to do when the lengths are different in the collection for componentDidUpdate
	*- ensure editing works with the sockets
	*- make sure that if i update from one browser, itll show up in another.
		*- fill in events for model and collection mixins
		*- make sure page loads and editing persists
		*- commit
	- add the ability to create new todos
		*- add the html with button
		*- don’t call save in the collection… the model well do it once the user changes the state at all. (so perfect…)
		*- in ::create for collection, check each item in _getData and check every property, if they all match, then the item is equal, THEN we add a new blank item to the collection.
			*- else we simply add the item to the collection.
		*- on the return of saveModel for socketmodelmixin, update using _setData
	*- add the code for handling delete events in collectionmixin
	*- add button for deleting todos
		*- in the destruction call for the TODO, delete it? Perhaps? I don’t want collection to handle it.
	*- rename  disable to autosync and simply set to true or false, no functions.
	*- Add the add button and all functionality to todo, then rename it to create.
	*- ensure the add code works
		*- test more in one go, both adding and deleteing
	*- I should have a fully working UI for TODOs
		*- todos aren’t staying synced between windows...

	*- the getNewItem function needs to be in one place, probably TODO or Project
	*- Address really bad //TODOs in code
	*- clean up meaningless console logs.
	
	*- Code for TODOs should be simple and straight forward and only handle UI. (except the create button and delete button. Only exceptions.)

